{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/adapters/application.jshint.lint-test.js","frontend/tests/app.jshint.lint-test.js","frontend/tests/authenticators/custom.jshint.lint-test.js","frontend/tests/authorizers/custom.jshint.lint-test.js","frontend/tests/components/create-new-movie/component.jshint.lint-test.js","frontend/tests/components/login-form/component.jshint.lint-test.js","frontend/tests/components/movie-data/component.jshint.lint-test.js","frontend/tests/components/search-box/component.jshint.lint-test.js","frontend/tests/components/show-errors/component.jshint.lint-test.js","frontend/tests/components/suggest-movie/component.jshint.lint-test.js","frontend/tests/components/x-file-input/component.jshint.lint-test.js","frontend/tests/controllers/application.jshint.lint-test.js","frontend/tests/controllers/login.jshint.lint-test.js","frontend/tests/controllers/movies.jshint.lint-test.js","frontend/tests/controllers/upload-csv.jshint.lint-test.js","frontend/tests/helpers/current-username.jshint.lint-test.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/destroy-app.jshint.lint-test.js","frontend/tests/helpers/ember-simple-auth.js","frontend/tests/helpers/module-for-acceptance.js","frontend/tests/helpers/module-for-acceptance.jshint.lint-test.js","frontend/tests/helpers/resolver.js","frontend/tests/helpers/resolver.jshint.lint-test.js","frontend/tests/helpers/results-filtered.jshint.lint-test.js","frontend/tests/helpers/start-app.js","frontend/tests/helpers/start-app.jshint.lint-test.js","frontend/tests/helpers/str-contains.jshint.lint-test.js","frontend/tests/instance-initializers/session-events.jshint.lint-test.js","frontend/tests/integration/components/actor-data/component-test.js","frontend/tests/integration/components/actor-data/component-test.jshint.lint-test.js","frontend/tests/integration/components/create-new-movie/component-test.js","frontend/tests/integration/components/create-new-movie/component-test.jshint.lint-test.js","frontend/tests/integration/components/file-upload-test.js","frontend/tests/integration/components/file-upload-test.jshint.lint-test.js","frontend/tests/integration/components/file-upload/component-test.js","frontend/tests/integration/components/file-upload/component-test.jshint.lint-test.js","frontend/tests/integration/components/login-form-test.js","frontend/tests/integration/components/login-form-test.jshint.lint-test.js","frontend/tests/integration/components/login-form/component-test.js","frontend/tests/integration/components/login-form/component-test.jshint.lint-test.js","frontend/tests/integration/components/movie-data/component-test.js","frontend/tests/integration/components/movie-data/component-test.jshint.lint-test.js","frontend/tests/integration/components/register-form-test.js","frontend/tests/integration/components/register-form-test.jshint.lint-test.js","frontend/tests/integration/components/register-form/component-test.js","frontend/tests/integration/components/register-form/component-test.jshint.lint-test.js","frontend/tests/integration/components/search-box-test.js","frontend/tests/integration/components/search-box-test.jshint.lint-test.js","frontend/tests/integration/components/search-box/component-test.js","frontend/tests/integration/components/search-box/component-test.jshint.lint-test.js","frontend/tests/integration/components/show-errors/component-test.js","frontend/tests/integration/components/show-errors/component-test.jshint.lint-test.js","frontend/tests/integration/components/show-paginator/component-test.js","frontend/tests/integration/components/show-paginator/component-test.jshint.lint-test.js","frontend/tests/integration/components/suggest-movie/component-test.js","frontend/tests/integration/components/suggest-movie/component-test.jshint.lint-test.js","frontend/tests/integration/components/x-file-input-test.js","frontend/tests/integration/components/x-file-input-test.jshint.lint-test.js","frontend/tests/integration/components/x-file-input/component-test.js","frontend/tests/integration/components/x-file-input/component-test.jshint.lint-test.js","frontend/tests/integration/components/x-file-upload/component-test.js","frontend/tests/integration/components/x-file-upload/component-test.jshint.lint-test.js","frontend/tests/models/actor.jshint.lint-test.js","frontend/tests/models/director.jshint.lint-test.js","frontend/tests/models/movie.jshint.lint-test.js","frontend/tests/models/user.jshint.lint-test.js","frontend/tests/resolver.jshint.lint-test.js","frontend/tests/router.jshint.lint-test.js","frontend/tests/routes/application.jshint.lint-test.js","frontend/tests/routes/index.jshint.lint-test.js","frontend/tests/routes/login.jshint.lint-test.js","frontend/tests/routes/movies.jshint.lint-test.js","frontend/tests/routes/new-movie.jshint.lint-test.js","frontend/tests/routes/upload-csv.jshint.lint-test.js","frontend/tests/serializers/movie.jshint.lint-test.js","frontend/tests/test-helper.js","frontend/tests/test-helper.jshint.lint-test.js","frontend/tests/transforms/movie.jshint.lint-test.js","frontend/tests/unit/controllers/movies-test.js","frontend/tests/unit/controllers/movies-test.jshint.lint-test.js","frontend/tests/unit/controllers/register-test.js","frontend/tests/unit/controllers/register-test.jshint.lint-test.js","frontend/tests/unit/controllers/upload-csv-test.js","frontend/tests/unit/controllers/upload-csv-test.jshint.lint-test.js","frontend/tests/unit/helpers/is-file-uploaded-test.js","frontend/tests/unit/helpers/is-file-uploaded-test.jshint.lint-test.js","frontend/tests/unit/helpers/results-filtered-test.js","frontend/tests/unit/helpers/results-filtered-test.jshint.lint-test.js","frontend/tests/unit/helpers/show-errors-test.js","frontend/tests/unit/helpers/show-errors-test.jshint.lint-test.js","frontend/tests/unit/models/movie-test.js","frontend/tests/unit/models/movie-test.jshint.lint-test.js","frontend/tests/unit/models/user-test.js","frontend/tests/unit/models/user-test.jshint.lint-test.js","frontend/tests/unit/routes/index-test.js","frontend/tests/unit/routes/index-test.jshint.lint-test.js","frontend/tests/unit/routes/login-test.js","frontend/tests/unit/routes/login-test.jshint.lint-test.js","frontend/tests/unit/routes/new-movie-test.js","frontend/tests/unit/routes/new-movie-test.jshint.lint-test.js","frontend/tests/unit/routes/register-test.js","frontend/tests/unit/routes/register-test.jshint.lint-test.js","frontend/tests/unit/routes/upload-csv-test.js","frontend/tests/unit/routes/upload-csv-test.jshint.lint-test.js","frontend/tests/unit/serializers/movie-test.js","frontend/tests/unit/serializers/movie-test.jshint.lint-test.js","frontend/tests/unit/views/file-upload-test.js","frontend/tests/unit/views/file-upload-test.jshint.lint-test.js","frontend/tests/views/file-picker.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nadapters/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n7 errors');\n  });\n});","define('frontend/tests/authenticators/custom.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/custom.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/custom.js should pass jshint.\\nauthenticators/custom.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nauthenticators/custom.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nauthenticators/custom.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthenticators/custom.js: line 21, col 51, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n6 errors');\n  });\n});","define('frontend/tests/authorizers/custom.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authorizers/custom.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authorizers/custom.js should pass jshint.\\nauthorizers/custom.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthorizers/custom.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nauthorizers/custom.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nauthorizers/custom.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nauthorizers/custom.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n5 errors');\n  });\n});","define('frontend/tests/components/create-new-movie/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/create-new-movie/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/create-new-movie/component.js should pass jshint.\\ncomponents/create-new-movie/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/create-new-movie/component.js: line 3, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/create-new-movie/component.js: line 3, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/create-new-movie/component.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('frontend/tests/components/login-form/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/login-form/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/login-form/component.js should pass jshint.\\ncomponents/login-form/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/login-form/component.js: line 3, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/login-form/component.js: line 3, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/login-form/component.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/login-form/component.js: line 12, col 91, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n5 errors');\n  });\n});","define('frontend/tests/components/movie-data/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/movie-data/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/movie-data/component.js should pass jshint.\\ncomponents/movie-data/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/movie-data/component.js: line 3, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/movie-data/component.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('frontend/tests/components/search-box/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/search-box/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/search-box/component.js should pass jshint.\\ncomponents/search-box/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/search-box/component.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/components/show-errors/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/show-errors/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/show-errors/component.js should pass jshint.\\ncomponents/show-errors/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/show-errors/component.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/components/suggest-movie/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/suggest-movie/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/suggest-movie/component.js should pass jshint.\\ncomponents/suggest-movie/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/suggest-movie/component.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/components/x-file-input/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/x-file-input/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/x-file-input/component.js should pass jshint.\\ncomponents/x-file-input/component.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/x-file-input/component.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/x-file-input/component.js: line 8, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/x-file-input/component.js: line 11, col 28, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/x-file-input/component.js: line 12, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/x-file-input/component.js: line 13, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/x-file-input/component.js: line 14, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncomponents/x-file-input/component.js: line 16, col 29, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncomponents/x-file-input/component.js: line 31, col 46, [\\'uploaded_movies\\'] is better written in dot notation.\\ncomponents/x-file-input/component.js: line 32, col 46, [\\'imported_movies\\'] is better written in dot notation.\\ncomponents/x-file-input/component.js: line 33, col 43, [\\'error_movies\\'] is better written in dot notation.\\n\\n11 errors');\n  });\n});","define('frontend/tests/controllers/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/application.js: line 3, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 3, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/application.js: line 5, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('frontend/tests/controllers/login.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass jshint.\\ncontrollers/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/login.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/login.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('frontend/tests/controllers/movies.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/movies.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/movies.js should pass jshint.\\ncontrollers/movies.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/movies.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/movies.js: line 17, col 5, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/movies.js: line 19, col 59, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('frontend/tests/controllers/upload-csv.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/upload-csv.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/upload-csv.js should pass jshint.\\ncontrollers/upload-csv.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/upload-csv.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/upload-csv.js: line 12, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/upload-csv.js: line 15, col 30, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\ncontrollers/upload-csv.js: line 16, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/upload-csv.js: line 17, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/upload-csv.js: line 18, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ncontrollers/upload-csv.js: line 21, col 31, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n8 errors');\n  });\n});","define('frontend/tests/helpers/current-username.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/current-username.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/current-username.js should pass jshint.\\nhelpers/current-username.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/current-username.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/current-username.js: line 7, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('frontend/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'frontend/tests/helpers/start-app', 'frontend/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _frontendTestsHelpersStartApp, _frontendTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _frontendTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _frontendTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('frontend/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/resolver', ['exports', 'frontend/resolver', 'frontend/config/environment'], function (exports, _frontendResolver, _frontendConfigEnvironment) {\n\n  var resolver = _frontendResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _frontendConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _frontendConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('frontend/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/results-filtered.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/results-filtered.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/results-filtered.js should pass jshint.\\nhelpers/results-filtered.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/results-filtered.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/results-filtered.js: line 8, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('frontend/tests/helpers/start-app', ['exports', 'ember', 'frontend/app', 'frontend/config/environment'], function (exports, _ember, _frontendApp, _frontendConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _frontendConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _frontendApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('frontend/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('frontend/tests/helpers/str-contains.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/str-contains.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/str-contains.js should pass jshint.\\nhelpers/str-contains.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/str-contains.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nhelpers/str-contains.js: line 10, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('frontend/tests/instance-initializers/session-events.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/session-events.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'instance-initializers/session-events.js should pass jshint.\\ninstance-initializers/session-events.js: line 1, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ninstance-initializers/session-events.js: line 2, col 3, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ninstance-initializers/session-events.js: line 3, col 3, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\ninstance-initializers/session-events.js: line 12, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\ninstance-initializers/session-events.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n5 errors');\n  });\n});","define('frontend/tests/integration/components/actor-data/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('actor-data', 'Integration | Component | actor data', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '/E3qr6xR',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"actor-data\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '1+muP00l',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"actor-data\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/actor-data/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/actor-data/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/actor-data/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/create-new-movie/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('create-new-movie', 'Integration | Component | create new movie', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'hja1JYs6',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"create-new-movie\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'OAspauQw',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"create-new-movie\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/create-new-movie/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/create-new-movie/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/create-new-movie/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/file-upload-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('file-upload', 'Integration | Component | file upload', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '87daURWc',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"file-upload\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'P8D2pida',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"file-upload\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/file-upload-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/file-upload-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/file-upload-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/file-upload/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('file-upload', 'Integration | Component | file upload', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '87daURWc',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"file-upload\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'P8D2pida',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"file-upload\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/file-upload/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/file-upload/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/file-upload/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/login-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('login-form', 'Integration | Component | login form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '2BL5yMwO',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"login-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'gvnGoe4M',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"login-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/login-form-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/login-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/login-form-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/login-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('login-form', 'Integration | Component | login form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '2BL5yMwO',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"login-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'gvnGoe4M',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"login-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/login-form/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/login-form/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/login-form/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/movie-data/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('movie-data', 'Integration | Component | movie data', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'CousCyIS',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"movie-data\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'TtDNPd+B',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"movie-data\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/movie-data/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/movie-data/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/movie-data/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/register-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('register-form', 'Integration | Component | register form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'xrP2UMhv',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"register-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'osswP2ry',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"register-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/register-form-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/register-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/register-form-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/register-form/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('register-form', 'Integration | Component | register form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'xrP2UMhv',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"register-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'osswP2ry',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"register-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/register-form/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/register-form/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/register-form/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/search-box-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('search-box', 'Integration | Component | search box', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'IOLl2FZQ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"search-box\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'ng0paKBK',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"search-box\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/search-box-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/search-box-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-box-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/search-box/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('search-box', 'Integration | Component | search box', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'IOLl2FZQ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"search-box\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'ng0paKBK',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"search-box\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/search-box/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/search-box/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-box/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/show-errors/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('show-errors', 'Integration | Component | show errors', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'Z1H1awfS',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"show-errors\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'sCtlTDo5',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"show-errors\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/show-errors/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/show-errors/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/show-errors/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/show-paginator/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('show-paginator', 'Integration | Component | show paginator', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'WI1jfJE/',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"show-paginator\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'jxEcEi7U',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"show-paginator\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/show-paginator/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/show-paginator/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/show-paginator/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/suggest-movie/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('suggest-movie', 'Integration | Component | suggest movie', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'ARMan+4w',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"suggest-movie\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'LDi4nS7v',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"suggest-movie\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/suggest-movie/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/suggest-movie/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/suggest-movie/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/x-file-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-file-input', 'Integration | Component | x file input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'DAxaUl6+',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"x-file-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'cl4da0Ev',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"x-file-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/x-file-input-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/x-file-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-file-input-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/x-file-input/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-file-input', 'Integration | Component | x file input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'DAxaUl6+',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"x-file-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'cl4da0Ev',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"x-file-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/x-file-input/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/x-file-input/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-file-input/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/integration/components/x-file-upload/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('x-file-upload', 'Integration | Component | x file upload', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'tWtkJTOP',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"x-file-upload\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'DeavmA/E',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"x-file-upload\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('frontend/tests/integration/components/x-file-upload/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/x-file-upload/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-file-upload/component-test.js should pass jshint.');\n  });\n});","define('frontend/tests/models/actor.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/actor.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/actor.js should pass jshint.\\nmodels/actor.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/actor.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/models/director.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/director.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/director.js should pass jshint.\\nmodels/director.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/director.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/models/movie.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/movie.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/movie.js should pass jshint.\\nmodels/movie.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/movie.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/movie.js: line 4, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n3 errors');\n  });\n});","define('frontend/tests/models/user.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/user.js should pass jshint.\\nmodels/user.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nmodels/user.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass jshint.\\nresolver.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nresolver.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","define('frontend/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nrouter.js: line 17, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n4 errors');\n  });\n});","define('frontend/tests/routes/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass jshint.\\nroutes/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/application.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/application.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/application.js: line 14, col 36, \\'spread/rest operator\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n6 errors');\n  });\n});","define('frontend/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass jshint.\\nroutes/index.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/index.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/index.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/index.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/index.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n5 errors');\n  });\n});","define('frontend/tests/routes/login.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/login.js should pass jshint.\\nroutes/login.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/login.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/login.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/login.js: line 8, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/login.js: line 14, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/login.js: line 24, col 29, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n8 errors');\n  });\n});","define('frontend/tests/routes/movies.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/movies.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/movies.js should pass jshint.\\nroutes/movies.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/movies.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/movies.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/movies.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/movies.js: line 5, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/movies.js: line 5, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/movies.js: line 7, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/movies.js: line 10, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n8 errors');\n  });\n});","define('frontend/tests/routes/new-movie.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/new-movie.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/new-movie.js should pass jshint.\\nroutes/new-movie.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/new-movie.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/new-movie.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/new-movie.js: line 9, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 25, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 43, col 29, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/new-movie.js: line 52, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 62, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 65, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/new-movie.js: line 66, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n12 errors');\n  });\n});","define('frontend/tests/routes/upload-csv.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/upload-csv.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/upload-csv.js should pass jshint.\\nroutes/upload-csv.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/upload-csv.js: line 2, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/upload-csv.js: line 4, col 1, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 4, col 1, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 6, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/upload-csv.js: line 9, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 15, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 18, col 30, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nroutes/upload-csv.js: line 19, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 20, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 21, col 9, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nroutes/upload-csv.js: line 24, col 31, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n12 errors');\n  });\n});","define('frontend/tests/serializers/movie.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/movie.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/movie.js should pass jshint.\\nserializers/movie.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/movie.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/movie.js: line 4, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 5, col 5, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 5, col 32, \\'spread/rest operator\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/movie.js: line 15, col 3, \\'concise methods\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 16, col 5, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 18, col 36, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/movie.js: line 19, col 7, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 21, col 7, \\'let\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 24, col 50, \\'arrow function syntax (=>)\\' is only available in ES6 (use \\'esversion: 6\\').\\nserializers/movie.js: line 25, col 9, \\'const\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\nserializers/movie.js: line 25, col 9, \\'destructuring binding\\' is available in ES6 (use \\'esversion: 6\\') or Mozilla JS extensions (use moz).\\n\\n13 errors');\n  });\n});","define('frontend/tests/test-helper', ['exports', 'frontend/tests/helpers/resolver', 'ember-qunit'], function (exports, _frontendTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_frontendTestsHelpersResolver['default']);\n});","define('frontend/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('frontend/tests/transforms/movie.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/movie.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'transforms/movie.js should pass jshint.\\ntransforms/movie.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n1 error');\n  });\n});","define('frontend/tests/unit/controllers/movies-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:movies', 'Unit | Controller | movies', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('frontend/tests/unit/controllers/movies-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/movies-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/movies-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/controllers/register-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('frontend/tests/unit/controllers/register-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/register-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/controllers/upload-csv-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:upload-csv', 'Unit | Controller | upload csv', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('frontend/tests/unit/controllers/upload-csv-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/upload-csv-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/upload-csv-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/is-file-uploaded-test', ['exports', 'frontend/helpers/is-file-uploaded', 'qunit'], function (exports, _frontendHelpersIsFileUploaded, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | is file uploaded');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersIsFileUploaded.isFileUploaded)([42]);\n    assert.ok(result);\n  });\n});","define('frontend/tests/unit/helpers/is-file-uploaded-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/is-file-uploaded-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/is-file-uploaded-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/results-filtered-test', ['exports', 'frontend/helpers/results-filtered', 'qunit'], function (exports, _frontendHelpersResultsFiltered, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | results filtered');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersResultsFiltered.resultsFiltered)([42]);\n    assert.ok(result);\n  });\n});","define('frontend/tests/unit/helpers/results-filtered-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/results-filtered-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/results-filtered-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/helpers/show-errors-test', ['exports', 'frontend/helpers/show-errors', 'qunit'], function (exports, _frontendHelpersShowErrors, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | show errors');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _frontendHelpersShowErrors.showErrors)([42]);\n    assert.ok(result);\n  });\n});","define('frontend/tests/unit/helpers/show-errors-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/show-errors-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/show-errors-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/models/movie-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('movie', 'Unit | Model | movie', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('frontend/tests/unit/models/movie-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/movie-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/movie-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('frontend/tests/unit/models/user-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/login-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/new-movie-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new-movie', 'Unit | Route | new movie', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/new-movie-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/new-movie-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-movie-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/register-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/register-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/register-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/routes/upload-csv-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:upload-csv', 'Unit | Route | upload csv', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/upload-csv-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/upload-csv-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/upload-csv-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/serializers/movie-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('movie', 'Unit | Serializer | movie', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:movie']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('frontend/tests/unit/serializers/movie-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/movie-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/movie-test.js should pass jshint.');\n  });\n});","define('frontend/tests/unit/views/file-upload-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('view:file-upload', 'Unit | View | file upload');\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var view = this.subject();\n    assert.ok(view);\n  });\n});","define('frontend/tests/unit/views/file-upload-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/views/file-upload-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/views/file-upload-test.js should pass jshint.');\n  });\n});","define('frontend/tests/views/file-picker.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | views/file-picker.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'views/file-picker.js should pass jshint.\\nviews/file-picker.js: line 1, col 1, \\'import\\' is only available in ES6 (use \\'esversion: 6\\').\\nviews/file-picker.js: line 3, col 1, \\'export\\' is only available in ES6 (use \\'esversion: 6\\').\\n\\n2 errors');\n  });\n});","/* jshint ignore:start */\n\nrequire('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}